const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const nodemailer = require("nodemailer");
const path = require("path");
const User = require("../models/User"); 

const JWT_SECRET = process.env.JWT_SECRET || "dev_secret";

async function registerUser(req, res) {
  try {
    const user = new User(req.body);
    await user.save();

    try {
      await sendMail(
        user.email,
        "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é",
        `
        <p>–®–∞–Ω–æ–≤–Ω–∞/–∏–π ${user.firstName || ""} ${user.lastName || ""},</p>
        <p>–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –¥–æ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É –Ω–∞ –Ω–∞—à–æ–º—É —Å–∞–π—Ç—ñ –Ü–Ω—Å—Ç–∏—Ç—É—Ç—É –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ—ó –°—É–ø–µ—Ä–≤—ñ–∑—ñ—ó.</p>
        <p>–ù–∞—Ä–∞–∑—ñ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–±—É–≤–∞—î –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ. –ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –≤–æ–Ω–∞ –±—É–¥–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ —Ç–∞ –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ª–∏—Å—Ç –∑ —É—Å—ñ–º–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ –¥–ª—è –≤—Ö–æ–¥—É —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –∫–∞–±—ñ–Ω–µ—Ç–æ–º.</p>
        <p>–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–Ω—É—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –≤–∏ –º–æ–∂–µ—Ç–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –Ω–∞ –Ω–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É: profsupervision@gmail.com.</p>
        <p>–ó –ø–æ–≤–∞–≥–æ—é,<br>–ö–æ–º–∞–Ω–¥–∞ IPS</p>
        <p><a href="https://mamko-prof-supervision.com/">mamko-prof-supervision.com</a></p>
        `
      );
    } catch (emailErr) {
      console.error("‚ùå Send email failed:", emailErr.message);
      // –ú–æ–∂–Ω–æ –¥–∞–∂–µ –∑–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ –≤ –ª–æ–≥–∏ –∏–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    }

    res.status(201).json({ message: "User registered successfully." });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
}


async function adminLogin(req, res) {
  const { username, password } = req.body;
  try {
    const user = await User.findOne({ username });
    if (!user) return res.status(404).json({ message: "User not found" });
    if (user.status !== "APPROVED") return res.status(403).json({ message: "Account not approved" });

    const ok = await bcrypt.compare(password, user.password);
    if (!ok) return res.status(401).json({ message: "Invalid credentials" });

    const roles = Array.isArray(user.roles) ? user.roles.map(String) : [];
    if (!roles.map(r => r.toLowerCase()).includes("admin")) {
      return res.status(403).json({ message: "Forbidden: admin only" });
    }

    const token = jwt.sign({ id: user._id, roles }, JWT_SECRET, { expiresIn: "7d" });
    setAuthCookie(res, token);
    // –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å cookie-—Å–µ—Å—Å–∏—é ‚Äî –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –≤ httpOnly-cookie:
    // res.cookie("token", token, { httpOnly: true, sameSite: "lax", secure: true });
    return res.json({ message: "Admin login successful", token, user });
  } catch (e) {
    res.status(500).json({ message: e.message });
  }
}

// /api/users/profile –∏ /api/users/admin/profile
async function profile(req, res) {
  try {
    const user = await User.findById(req.user?.id || req.user?._id).select("-password");
    if (!user) return res.status(404).json({ message: "User not found" });
    res.json(user);
  } catch (e) {
    res.status(500).json({ message: e.message });
  }
}

// /api/users/recovery/verify
async function verifyRecoveryCode(req, res) {
  const { email, code } = req.body;
  if (!email || !code) return res.status(400).json({ message: "Email and code are required" });
  try {
    const user = await User.findOne({ email });
    if (!user || user.recoveryCode !== String(code)) {
      return res.status(400).json({ message: "Invalid code" });
    }
    res.json({ ok: true });
  } catch (e) {
    res.status(500).json({ message: e.message });
  }
}

// /api/users/recovery/reset
async function resetPassword(req, res) {
  const { email, code, newPassword } = req.body;
  if (!email || !code || !newPassword) {
    return res.status(400).json({ message: "Email, code and newPassword are required" });
  }
  try {
    const user = await User.findOne({ email });
    if (!user || user.recoveryCode !== String(code)) {
      return res.status(400).json({ message: "Invalid code" });
    }
    user.password = await bcrypt.hash(newPassword, 10);
    user.recoveryCode = undefined;
    await user.save();
    res.json({ message: "Password updated" });
  } catch (e) {
    res.status(500).json({ message: e.message });
  }
}



async function getAllUsers(req, res) {
  try {
    const { status } = req.query;
    const filter = status ? { status } : {};

    const users = await User.find(filter).sort({ createdAt: -1 });
    res.json(users);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
    res.status(500).json({ message: 'Server error' });
  }
}

async function getUserById(req, res) {
  try {
    const user = await User.findById(req.params.id);
    if (!user) return res.status(404).json({ message: "User not found" });
    res.json(user);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
}

async function updateUserStatus(req, res) {
  try {
    const { status, role } = req.body;
    const update = { status };
    if (role) update.role = role;

    const user = await User.findByIdAndUpdate(req.params.id, update, { new: true });

    if (status === "APPROVED") {
      await sendMail(
        user.email,
        "–í–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É IPS –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ",
        `
        <p>–®–∞–Ω–æ–≤–Ω–∞/–∏–π ${user.firstName || ""} ${user.lastName || ""},</p>
        <p>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –¥–æ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É –Ω–∞ –Ω–∞—à–æ–º—É —Å–∞–π—Ç—ñ –Ü–Ω—Å—Ç–∏—Ç—É—Ç—É –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ—ó –°—É–ø–µ—Ä–≤—ñ–∑—ñ—ó –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞.</p>
        <p>–í—ñ–¥—Ç–µ–ø–µ—Ä –≤–∏ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –≤–∞—à–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É.</p>
        <p>üîê <strong>–î–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É:</strong><br>
        –ü–æ—Å–∏–ª–∞–Ω–Ω—è: <a href="http://mamko-prof-supervision.com/login">–í—Ö—ñ–¥</a><br>
        –Ü–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${user.username}<br>
        –í–∞—à –ø–∞—Ä–æ–ª—å: [********]</p>
        <p>üìå –Ø–∫—â–æ –≤–∏ –º–∞—î—Ç–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è ‚Äî –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –Ω–∞ profsupervision@gmail.com.</p>
        <p>–ó –ø–æ–≤–∞–≥–æ—é,<br>–ö–æ–º–∞–Ω–¥–∞ IPS</p>
        <p><a href="https://mamko-prof-supervision.com/">mamko-prof-supervision.com</a></p>
        `
      );
    }

    res.json(user);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
}


async function loginUser(req, res) {
  const { username, password } = req.body;

  try {
    const user = await User.findOne({ username });
    if (!user) return res.status(404).json({ message: "User not found" });
    if (user.status !== "APPROVED") return res.status(403).json({ message: "Account not approved" });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(401).json({ message: "Invalid credentials" });

    const roles = Array.isArray(user.roles) ? user.roles.map(String) : [];
    const token = jwt.sign({ id: user._id, roles }, JWT_SECRET, { expiresIn: "7d" });

    // set httpOnly auth cookie
    setAuthCookie(res, token);

    return res.status(200).json({ message: "Login successful", user, token });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
}



async function updateUser(req, res) {
  try {
    const user = await User.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!user) return res.status(404).json({ message: "User not found" });
    res.json(user);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
}

const transporter = nodemailer.createTransport({
  service: "Gmail",
  auth: {
    user: process.env.EMAIL_FROM,
    pass: process.env.EMAIL_PASS,
  },
});

async function sendMail(to, subject, html) {
  await transporter.sendMail({
    from: process.env.EMAIL_FROM,
    to,
    subject,
    html,
  });
}
async function sendRecoveryCode(req, res) {
  const { email } = req.body;

  if (!email) return res.status(400).json({ message: "Email is required" });

  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "User not found" });

    const code = Math.floor(100000 + Math.random() * 900000).toString();
    user.recoveryCode = code;
    await user.save();

    await transporter.sendMail({
      from: process.env.EMAIL_FROM,
      to: email,
      subject: "–ö–æ–¥ –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é",
      text: `–í–∞—à –∫–æ–¥ –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é: ${code}`
    });
    res.json({ message: "–ö–æ–¥ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –ø–æ—à—Ç—É" });
  } catch (error) {
    console.error("sendRecoveryCode error:", error);
    res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–∏—Å—Ç" });
  }
}


const uploadUserPhoto = async (req, res) => {
  try {
    const userId = req.params.id;
    const photoPath = req.file ? `/uploads/${req.file.filename}` : null;

    if (!photoPath) return res.status(400).json({ message: "–§–æ—Ç–æ –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ." });

    const user = await User.findByIdAndUpdate(userId, { photoUrl: photoPath }, { new: true });
    res.json({ message: "–§–æ—Ç–æ –æ–Ω–æ–≤–ª–µ–Ω–æ", photoUrl: photoPath });
  } catch (err) {
    console.error("Photo upload error:", err);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." });
  }
};

function setAuthCookie(res, token) {
  const isProd = process.env.NODE_ENV === 'production';
  res.cookie('token', token, {
    httpOnly: true,
    sameSite: isProd ? 'none' : 'lax',      // 'none' –µ—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç –Ω–∞ –¥—Ä—É–≥–æ–º –¥–æ–º–µ–Ω–µ/—Å—É–±–¥–æ–º–µ–Ω–µ
    secure:  isProd ? true : false,         // –¥–ª—è 'none' –Ω—É–∂–µ–Ω HTTPS!
    domain:  isProd ? '.mamko-prof-supervision.com' : undefined, // –æ–±—â–∏–π –¥–ª—è –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤
    path: '/',
    maxAge: 7 * 24 * 60 * 60 * 1000,
  });
}

module.exports = {
  registerUser,
  getAllUsers,
  getUserById,
  updateUserStatus,
  loginUser,
  updateUser,
  sendRecoveryCode,
  uploadUserPhoto,
  adminLogin,
  profile,
  verifyRecoveryCode,
  resetPassword,
};