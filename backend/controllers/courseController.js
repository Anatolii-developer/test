const Course = require('../models/Course');

// POST /api/courses
exports.createCourse = async (req, res) => {
  try {
    const { courseDates } = req.body;

    const startDate = new Date(`${courseDates.start}T00:00:00`);
    const endDate = new Date(`${courseDates.end}T23:59:59`);
    const now = new Date();

    let status = "–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏–π";
    if (now >= startDate && now <= endDate) status = "–ü–æ—Ç–æ—á–Ω–∏–π";
    else if (now > endDate) status = "–ü—Ä–æ–π–¥–µ–Ω–∏–π";

    const course = new Course({
      ...req.body,
      courseDates: {
        start: startDate,
        end: endDate,
      },
      status
    });

    await course.save();
    res.status(201).json({ success: true, course });

  } catch (err) {
    console.error("‚ùå Error:", err.message);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫—É—Ä—Å—É", error: err.message });
  }
};



// GET /api/courses
exports.getCourses = async (req, res) => {
  try {
    const courses = await Course.find().sort({ createdAt: -1 });

    const now = new Date();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    const updatedCourses = await Promise.all(
      courses.map(async (course) => {
        const start = new Date(course.courseDates.start);
        const end = new Date(course.courseDates.end);

        let newStatus = "–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏–π";
        if (now >= start && now <= end) {
          newStatus = "–ü–æ—Ç–æ—á–Ω–∏–π";
        } else if (now > end) {
          newStatus = "–ü—Ä–æ–π–¥–µ–Ω–∏–π";
        }

        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ
        if (course.status !== newStatus) {
          course.status = newStatus;
          await course.save(); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ MongoDB
        }

        return course;
      })
    );

    res.json(updatedCourses);
  } catch (error) {
    console.error("‚ùå Error fetching courses:", error.message, error.stack);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—É—Ä—Å—ñ–≤", error: error.message });
  }
};


exports.getCourseById = async (req, res) => {
  try {
    const course = await Course.findById(req.params.id)
      .populate('participants', 'fullName email');

    if (!course) return res.status(404).json({ message: "–ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

    // üü° –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    const now = new Date();
    const start = new Date(course.courseDates.start);
    const end = new Date(course.courseDates.end);

    let newStatus = "–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏–π";
    if (now >= start && now <= end) {
      newStatus = "–ü–æ—Ç–æ—á–Ω–∏–π";
    } else if (now > end) {
      newStatus = "–ü—Ä–æ–π–¥–µ–Ω–∏–π";
    }

    // üü° –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ
    if (course.status !== newStatus) {
      course.status = newStatus;
      await course.save();
    }

    res.json(course);
  } catch (error) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—É—Ä—Å—É", error: error.message });
  }
};


// PUT /api/courses/:id
exports.updateCourse = async (req, res) => {
  try {
    const updatedCourse = await Course.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!updatedCourse) return res.status(404).json({ message: "–ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    res.json(updatedCourse);
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫—É—Ä—Å—É:", err);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

