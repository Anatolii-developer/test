const User = require('../models/User');
const bcrypt = require("bcryptjs");
const nodemailer = require("nodemailer");
const path = require("path");
const sendRegistrationEmail = require("../mailer");


exports.registerUser = async (req, res) => {
  try {
    const user = new User(req.body);
    await user.save();

    // 1) –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É —Å—Ä–∞–∑—É
    res.status(201).json({ message: "User registered successfully.", user });

    // 2) –ü–∏—Å—å–º–æ ‚Äî fire-and-forget
    Promise.resolve()
      .then(() => sendRegistrationEmail(user.email, user.firstName, user.lastName))
      .catch((e) => console.error("‚ö†Ô∏è sendRegistrationEmail failed:", e?.message || e));
  } catch (error) {
    console.error("‚ùå Registration error:", error);
    res.status(500).json({ error: error.message });
  }
};



exports.getAllUsers = async (req, res) => {
  try {
    const { status } = req.query;
    const filter = status ? { status } : {};
    const users = await User.find(filter).sort({ createdAt: -1 });
    res.json(users);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
    res.status(500).json({ message: 'Server error' });
  }
};

exports.getUserById = async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) return res.status(404).json({ message: "User not found" });
    res.json(user);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

exports.updateUserStatus = async (req, res) => {
  try {
    const { status, roles } = req.body;
    const update = { status };

    if (Array.isArray(roles)) {
      update.roles = roles;
    }

    const user = await User.findByIdAndUpdate(req.params.id, update, { new: true });

    if (!user) return res.status(404).json({ message: "User not found" });

    // üì® Email —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    // if (status === "APPROVED") {
    //   await sendMail(
    //     user.email,
    //     "–í–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É IPS –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ",
    //     `...`
    //   );
    // }

    res.json(user);
  } catch (error) {
    console.error("‚ùå updateUserStatus error:", error);
    res.status(500).json({ error: error.message });
  }
};


exports.loginUser = async (req, res) => {
  const { username, password } = req.body;

  try {
    const user = await User.findOne({ username });
    if (!user) return res.status(404).json({ message: "User not found" });
    if (user.status !== "APPROVED") return res.status(403).json({ message: "Account not approved" });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(401).json({ message: "Invalid credentials" });

    res.status(200).json({ message: "Login successful", user });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

exports.updateUser = async (req, res) => {
  try {
    const user = await User.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!user) return res.status(404).json({ message: "User not found" });
    res.json(user);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};


exports.sendRecoveryCode = async (req, res) => {
  const { email } = req.body;

  if (!email) return res.status(400).json({ message: "Email is required" });

  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "User not found" });

    const code = Math.floor(100000 + Math.random() * 900000).toString();
    user.recoveryCode = code;
    await user.save();

    // Email –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –µ—ë —Ç–æ–∂–µ –º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
    const transporter = nodemailer.createTransport({
      service: "Gmail",
      auth: {
        user: process.env.EMAIL_FROM,
        pass: process.env.EMAIL_PASS
      }
    });

    const mailOptions = {
      from: process.env.EMAIL_FROM,
      to: email,
      subject: "–ö–æ–¥ –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é",
      text: `–í–∞—à –∫–æ–¥ –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é: ${code}`
    };

    await transporter.sendMail(mailOptions);
    res.json({ message: "–ö–æ–¥ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –ø–æ—à—Ç—É" });
  } catch (error) {
    console.error("sendRecoveryCode error:", error);
    res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–∏—Å—Ç" });
  }
};

const uploadUserPhoto = async (req, res) => {
  try {
    const userId = req.params.id;
    const photoPath = req.file ? `/uploads/${req.file.filename}` : null;

    if (!photoPath) return res.status(400).json({ message: "–§–æ—Ç–æ –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ." });

    const user = await User.findByIdAndUpdate(userId, { photoUrl: photoPath }, { new: true });
    res.json({ message: "–§–æ—Ç–æ –æ–Ω–æ–≤–ª–µ–Ω–æ", photoUrl: photoPath });
  } catch (err) {
    console.error("Photo upload error:", err);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." });
  }
};

module.exports = {
  ...exports,
  uploadUserPhoto,
};
