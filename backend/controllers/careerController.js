const mongoose = require('mongoose');   // ‚Üê –≠–¢–û–ì–û –ù–ï –•–í–ê–¢–ê–õ–û
const CareerApplication = require("../models/CareerApplication");
const User = require("../models/User");

// ==== helpers
async function isAdminUser(req) {
  const rolesFromToken = Array.isArray(req.user?.roles) ? req.user.roles : [];
  const isAdminFromToken = rolesFromToken
    .map((r) => String(r).toLowerCase())
    .some((r) => r.includes("admin") || r.includes("–∞–¥–º—ñ–Ω"));
  if (isAdminFromToken) return true;

  const uid = req.user?._id || req.user?.id;
  if (!uid) return false;
  const me = await User.findById(uid).select("roles").lean();
  return (
    Array.isArray(me?.roles) &&
    me.roles
      .map((r) => String(r).toLowerCase())
      .some((r) => r.includes("admin") || r.includes("–∞–¥–º—ñ–Ω"))
  );
}

async function isMentorUser(req) {
  const rolesFromToken = Array.isArray(req.user?.roles) ? req.user.roles : [];
  const isMentorFromToken = rolesFromToken
    .map(r => String(r).toLowerCase())
    .some(r => r.includes('mentor') || r.includes('–º–µ–Ω—Ç–æ—Ä'));
  if (isMentorFromToken) return true;

  const uid = req.user?._id || req.user?.id;
  if (!uid) return false;
  const me = await User.findById(uid).select('roles').lean();
  return Array.isArray(me?.roles) && me.roles
    .map(r => String(r).toLowerCase())
    .some(r => r.includes('mentor') || r.includes('–º–µ–Ω—Ç–æ—Ä'));
}

function hasMentorRole(roles) {
  return (
    Array.isArray(roles) &&
    roles
      .map((r) => String(r).toLowerCase())
      .some((r) => r.includes("mentor") || r.includes("–º–µ–Ω—Ç–æ—Ä"))
  );
}

/**
 * –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏:
 * - admin: –¥–∞
 * - mentor: –µ—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞—è–≤–∫—É
 * - applicant: –µ—Å–ª–∏ —Å–∞–º –ø–æ–¥–∞–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç)
 */
async function canViewApplication(req, app) {
  if (await isAdminUser(req)) return true;

  const myId = String(req.user?._id || req.user?.id || '');

  // –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –º–µ–Ω—è ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–æ–ª–µ–π –≤ —Ç–æ–∫–µ–Ω–µ
  const assignedId = String(
    app.assignedMentor?._id ||
    app.assignedMentor ||
    app.assignedMentorId ||
    ''
  );
  if (assignedId && assignedId === myId) return true;

  // –ó–∞—è–≤–∏—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Å–≤–æ—é –∑–∞—è–≤–∫—É
  if (String(app.user?._id || app.user) === myId) return true;

  // –ò–Ω–∞—á–µ ‚Äî –∑–∞–ø—Ä–µ—Ç
  return false;
}

// ==== handlers

// –±—ã–ª —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—Å–∫–∏–π ‚Äî –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å (–¥–ª—è —á–∏—Å—Ç–æ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ä–æ—É—Ç–æ–≤)
async function getOneAdmin(req, res) {
  try {
    if (!(await isAdminUser(req))) {
      return res
        .status(403)
        .json({ ok: false, message: "Forbidden: admin only" });
    }
    const app = await CareerApplication.findById(req.params.id)
      .populate("user", "firstName lastName middleName email username photoUrl")
      .populate("assignedMentor", "firstName lastName email username");
    if (!app) return res.status(404).json({ ok: false, message: "Not found" });
    res.json({ ok: true, application: app });
  } catch (e) {
    console.error("getOneAdmin failed:", e);
    res.status(500).json({ ok: false, message: "Server error" });
  }
}

// –ù–û–í–´–ô: –¥–ª—è –∞–¥–º–∏–Ω–∞, –º–µ–Ω—Ç–æ—Ä–∞ (—Å–≤–æ—ë), —Ç–∞/–∞–±–æ –∑–∞—è–≤–Ω–∏–∫–∞ (—Å–≤–æ—ë)
async function getOne(req, res) {
  try {
    const app = await CareerApplication.findById(req.params.id)
      .populate("user", "firstName lastName middleName email username photoUrl")
      .populate("assignedMentor", "firstName lastName email username");

    if (!app) return res.status(404).json({ ok: false, message: "Not found" });

    if (!(await canViewApplication(req, app))) {
      return res.status(403).json({ ok: false, message: "Forbidden" });
    }

    res.json({ ok: true, application: app });
  } catch (e) {
    console.error("getOne failed:", e);
    res.status(500).json({ ok: false, message: "Server error" });
  }
}

async function listAdmin(req, res) {
  try {
    if (!(await isAdminUser(req))) {
      return res.status(403).json({ ok:false, message:'Forbidden: admin only' });
    }

    const apps = await CareerApplication.find({})
      .populate('user', 'firstName lastName email username')
      .populate('assignedMentor', 'firstName lastName email username')
      .sort({ createdAt: -1 });

    res.json({ ok:true, rows: apps });
  } catch (err) {
    console.error('career listAdmin failed:', err);
    res.status(500).json({ ok:false, message:'Server error' });
  }
}

async function list(req, res) {
  try {
    if (!req.user)
      return res.status(401).json({ ok: false, message: "Unauthorized" });

    const me = await User.findById(req.user._id).select("roles").lean();
    const isMentor =
      Array.isArray(me?.roles) &&
      me.roles.some((r) =>
        String(r).toLowerCase().includes("mentor") ||
        String(r).toLowerCase().includes("–º–µ–Ω—Ç–æ—Ä")
      );

    const myId = req.user._id;

    // üîπ –ù–æ–≤–æ–µ: —è–≤–Ω—ã–π –≤—ã–±–æ—Ä —Å–∫–æ—É–ø–∞ —á–µ—Ä–µ–∑ query
    const wantMine      = String(req.query.mine || "") === "1";       // —Ç–æ–ª—å–∫–æ –º–æ–∏ –ø–æ–¥–∞–Ω–Ω—ã–µ –º–Ω–æ—é
    const wantAssigned  = String(req.query.assigned || "") === "1";   // –∑–∞—è–≤–∫–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –Ω–∞ –º–µ–Ω—è –∫–∞–∫ –Ω–∞ –º–µ–Ω—Ç–æ—Ä–∞

    let filter;
    if (wantMine) {
      filter = { user: myId };
    } else if (wantAssigned) {
      filter = { $or: [{ assignedMentor: myId }, { assignedMentorId: myId }] };
    } else {
      // –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∫–∞–∫ –±—ã–ª–æ)
      filter = isMentor
        ? { $or: [{ assignedMentor: myId }, { assignedMentorId: myId }] }
        : { user: myId };
    }

    const apps = await CareerApplication.find(filter)
      .populate("user", "firstName lastName email username")
      .populate("assignedMentor", "firstName lastName email username")
      .sort({ createdAt: -1 });

    res.json({ ok: true, rows: apps });
  } catch (err) {
    console.error("career list failed:", err);
    res.status(500).json({ ok: false, message: "Server error" });
  }
}

// POST /api/career-applications
async function create(req, res) {
  try {
    const b = req.body || {};

    // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞–¥—Ä–µ—Å–∞—Ç–∞
    const rawTarget = String(b.target || '').toLowerCase().trim();
    const target = rawTarget.startsWith('sup') ? 'supervisor'
                 : rawTarget.startsWith('men') ? 'mentor'
                 : null;

    if (!target) {
      return res.status(400).json({ ok:false, message: '–í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å–∞—Ç–∞: mentor –∞–±–æ supervisor' });
    }

    // –∫—Ç–æ –ø–æ–¥–∞–ª (–µ—Å–ª–∏ –µ—Å—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)
    const userId = req.user?._id || req.user?.id || null;

    const app = await CareerApplication.create({
      user: userId,
      username: req.user?.username,
      fullName: b.fullName,
      email: b.email,

      target,                         

      experience: b.experience,
      ageGroup: b.ageGroup,
      requestText: b.requestText,
      aboutText: b.aboutText,
    });

    // –≤–µ—Ä–Ω—ë–º —Å –ø–æ–ø—É–ª—è—Ü–∏–µ–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ñ—Ä–æ–Ω—Ç–∞
    const populated = await CareerApplication.findById(app._id)
      .populate('user', 'firstName lastName email username')
      .lean();

    return res.status(201).json({ ok:true, application: populated });
  } catch (e) {
    console.error('[career create] failed:', e);
    return res.status(500).json({ ok:false, message:'Server error' });
  }
}
async function assignMentor(req, res) {
  try {
    const appId = req.params.id;
    const { mentorId } = req.body || {};

    if (!mongoose.isValidObjectId(appId)) {
      return res.status(400).json({ ok:false, message:'Invalid application id' });
    }
    if (!mongoose.isValidObjectId(mentorId)) {
      return res.status(400).json({ ok:false, message:'Invalid mentor id' });
    }

    const mentor = await User.findById(mentorId).select('roles firstName lastName email');
    if (!mentor) return res.status(404).json({ ok:false, message:'Mentor not found' });

    const isMentor = Array.isArray(mentor.roles) &&
      mentor.roles.map(r => String(r).toLowerCase())
                  .some(r => r.includes('mentor') || r.includes('–º–µ–Ω—Ç–æ—Ä'));
    if (!isMentor) return res.status(400).json({ ok:false, message:'User is not a mentor' });

    const app = await CareerApplication.findByIdAndUpdate(
      appId,
      { $set: { assignedMentor: mentor._id } },
      { new: true }
    )
      .populate('user', 'firstName lastName email username photoUrl')
      .populate('assignedMentor', 'firstName lastName email username');

    if (!app) return res.status(404).json({ ok:false, message:'Application not found' });

    return res.json({ ok:true, application: app });
  } catch (e) {
    console.error('[assignMentor] failed:', e);
    // –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–¥–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    return res.status(500).json({ ok:false, message: e?.message || 'Server error' });
  }
}

module.exports = {
  list,
  listAdmin,
  create,
  assignMentor,
  getOneAdmin,
  getOne, // <-- —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
};
